# -*- coding: utf-8 -*-
"""Loan_Approval.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jYMOdLabMrIvT8AADpJ2sY0cuVJig2ze
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

df = pd.read_csv('/content/drive/MyDrive/Training Loan Dataset.csv')

df.head()

df.tail()

df.dtypes

df.isnull().sum()

for column in ['Gender', 'Married', 'Dependents', 'Self_Employed']:
    df[column].fillna(df[column].mode()[0], inplace=True)

df['LoanAmount'].fillna(df['LoanAmount'].median(), inplace=True)
df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].median(), inplace=True)
df['Credit_History'].fillna(df['Credit_History'].median(), inplace=True)

df.isnull().sum()

le = LabelEncoder()
for column in ['Gender', 'Married', 'Education', 'Self_Employed', 'Loan_Status']:
    df[column] = le.fit_transform(df[column])

df = pd.get_dummies(df, columns=['Dependents', 'Property_Area'])

df.head()

scaler = StandardScaler()
df[['ApplicantIncome', 'CoapplicantIncome', 'LoanAmount']] = scaler.fit_transform(
    df[['ApplicantIncome', 'CoapplicantIncome', 'LoanAmount']])

X = df.drop(['Loan_ID', 'Loan_Status'], axis=1)
y = df['Loan_Status']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, roc_auc_score
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F1 Score: {f1:.2f}")
print(f"Confusion Matrix:\n{conf_matrix}")

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelEncoder
from sklearn.impute import SimpleImputer
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report


from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB

models = {
    'Logistic Regression': LogisticRegression(),
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(),
    'SVM': SVC(),
    'K-Nearest Neighbors': KNeighborsClassifier(),
    'Naive Bayes': GaussianNB()
}

results = {}
for model_name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred, output_dict=True)
    results[model_name] = {
        'Accuracy': accuracy,
        'Precision': report['weighted avg']['precision'],
        'Recall': report['weighted avg']['recall'],
        'F1-Score': report['weighted avg']['f1-score']
    }

df1 = pd.read_csv('/content/drive/MyDrive/Test Loan Dataset.csv')

for column in ['Gender', 'Dependents', 'Married', 'Education', 'Self_Employed', 'Loan_Amount_Term', 'Credit_History']:
    df1[column].fillna(df1[column].mode()[0], inplace=True)
df1['LoanAmount'] = df1['LoanAmount'].fillna(np.nanmedian(df1['LoanAmount']))

for column in ['Gender', 'Dependents', 'Married', 'Education', 'Self_Employed', 'Credit_History']:
    encoder = LabelEncoder()
    df1[column] = encoder.fit_transform(df1[column])

dummy_data = pd.get_dummies(df1['Property_Area'])
df1 = pd.concat([df1, dummy_data], axis=1)
df1.drop(['Property_Area'], axis=1, inplace=True)

loan_ids = df1['Loan_ID']
df1.drop(['Loan_ID'], axis=1, inplace=True)

scaler = StandardScaler()
scaler.fit(X_train)

test_scaled_features = scaler.transform(df1)

best_model = models['Logistic Regression']
test_predictions = best_model.predict(test_scaled_features)

# Converting predictions to DataFrame and saving to CSV file
predictions_df = pd.DataFrame({
    'Loan_ID': loan_ids,
    'Loan_Status': test_predictions
})
predictions_df.to_csv('Predicted_Loan_Status.csv', index=False)

predictions_df